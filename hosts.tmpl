127.0.0.1	localhost
::1	localhost ip6-localhost ip6-loopback
fe00::0	ip6-localnet
ff00::0	ip6-mcastprefix
ff02::1	ip6-allnodes
ff02::2	ip6-allrouters

{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}


{{ define "host" }}
	{{ if .Address }}
		{{ if and .Container.Node.ID .Address.HostPort }}
# {{ .Container.Node.Name }}/{{ .Container.Name }}
{{ .Container.Node.Address.IP }} {{ .Container.Node.Name }}/{{ .Container.Name }}
		{{ else if .Network }}
# {{ .Container.Name }}
{{ .Network.IP }} {{ .Host }}
		{{ end }}
	{{ else if .Network }}
# {{ .Container.Name }}
		{{ if .Network.IP }}
{{ .Network.IP }} {{ .Host }}
		{{ else }}
127.0.0.1 {{ .Host }}
		{{ end }}
	{{ end }}
{{ end }}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
# {{ $host }}

{{ range $container := $containers }}
	{{ $addrLen := len $container.Addresses }}

	{{ range $knownNetwork := $CurrentContainer.Networks }}
		{{ range $containerNetwork := $container.Networks }}
			{{ if (and (ne $containerNetwork.Name "ingress") (or (eq $knownNetwork.Name $containerNetwork.Name) (eq $knownNetwork.Name "host"))) }}
## Can be connected with "{{ $containerNetwork.Name }}" network

				{{/* If only 1 port exposed, use that */}}
				{{ if eq $addrLen 1 }}
					{{ $address := index $container.Addresses 0 }}
{{ template "host" (dict "Container" $container "Address" $address "Network" $containerNetwork "Host" $host) }}
				{{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
				{{ else }}
					{{ $port := coalesce $container.Env.VIRTUAL_PORT "80" }}
					{{ $address := where $container.Addresses "Port" $port | first }}
{{ template "host" (dict "Container" $container "Address" $address "Network" $containerNetwork "Host" $host) }}
				{{ end }}
			{{ else }}
# Cannot connect to network of this container {{ $container.Name }};
			{{ end }}
		{{ end }}
	{{ end }}
{{ end }}

{{ end }}
